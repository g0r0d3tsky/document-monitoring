// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// User defines model for User.
type User struct {
	Email     *string `json:"email,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	Id        *int64  `json:"id,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	Password  *string `json:"password,omitempty"`

	// Role User Role
	Role     *string `json:"role,omitempty"`
	Username *string `json:"username,omitempty"`
}

// PostContentMultipartBody defines parameters for PostContent.
type PostContentMultipartBody struct {
	// File Файл для загрузки.
	File openapi_types.File `json:"file"`
}

// PutContentNameMultipartBody defines parameters for PutContentName.
type PutContentNameMultipartBody struct {
	// File Новый файл для загрузки.
	File openapi_types.File `json:"file"`
}

// LoginUserParams defines parameters for LoginUser.
type LoginUserParams struct {
	// Username The user name for login
	Username *string `form:"username,omitempty" json:"username,omitempty"`

	// Password The password for login in clear text
	Password *string `form:"password,omitempty" json:"password,omitempty"`
}

// PostContentMultipartRequestBody defines body for PostContent for multipart/form-data ContentType.
type PostContentMultipartRequestBody PostContentMultipartBody

// PutContentNameMultipartRequestBody defines body for PutContentName for multipart/form-data ContentType.
type PutContentNameMultipartRequestBody PutContentNameMultipartBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = User

// CreateUserFormdataRequestBody defines body for CreateUser for application/x-www-form-urlencoded ContentType.
type CreateUserFormdataRequestBody = User

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = User

// UpdateUserFormdataRequestBody defines body for UpdateUser for application/x-www-form-urlencoded ContentType.
type UpdateUserFormdataRequestBody = User

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Upload text or file content
	// (POST /content)
	PostContent(w http.ResponseWriter, r *http.Request)
	// Delete content by name
	// (DELETE /content/{name})
	DeleteContentName(w http.ResponseWriter, r *http.Request, name string)
	// Get content by name
	// (GET /content/{name})
	GetContentName(w http.ResponseWriter, r *http.Request, name string)
	// Update content by name
	// (PUT /content/{name})
	PutContentName(w http.ResponseWriter, r *http.Request, name string)
	// Create user
	// (POST /user)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Logs user into the system
	// (GET /user/login)
	LoginUser(w http.ResponseWriter, r *http.Request, params LoginUserParams)
	// Logs out current logged in user session
	// (GET /user/logout)
	LogoutUser(w http.ResponseWriter, r *http.Request)
	// Delete user
	// (DELETE /user/{username})
	DeleteUser(w http.ResponseWriter, r *http.Request, username string)
	// Get user by user name
	// (GET /user/{username})
	GetUserByName(w http.ResponseWriter, r *http.Request, username string)
	// Update user
	// (PUT /user/{username})
	UpdateUser(w http.ResponseWriter, r *http.Request, username string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Upload text or file content
// (POST /content)
func (_ Unimplemented) PostContent(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete content by name
// (DELETE /content/{name})
func (_ Unimplemented) DeleteContentName(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get content by name
// (GET /content/{name})
func (_ Unimplemented) GetContentName(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update content by name
// (PUT /content/{name})
func (_ Unimplemented) PutContentName(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create user
// (POST /user)
func (_ Unimplemented) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Logs user into the system
// (GET /user/login)
func (_ Unimplemented) LoginUser(w http.ResponseWriter, r *http.Request, params LoginUserParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Logs out current logged in user session
// (GET /user/logout)
func (_ Unimplemented) LogoutUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete user
// (DELETE /user/{username})
func (_ Unimplemented) DeleteUser(w http.ResponseWriter, r *http.Request, username string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user by user name
// (GET /user/{username})
func (_ Unimplemented) GetUserByName(w http.ResponseWriter, r *http.Request, username string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update user
// (PUT /user/{username})
func (_ Unimplemented) UpdateUser(w http.ResponseWriter, r *http.Request, username string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostContent operation middleware
func (siw *ServerInterfaceWrapper) PostContent(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostContent(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteContentName operation middleware
func (siw *ServerInterfaceWrapper) DeleteContentName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteContentName(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetContentName operation middleware
func (siw *ServerInterfaceWrapper) GetContentName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetContentName(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutContentName operation middleware
func (siw *ServerInterfaceWrapper) PutContentName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutContentName(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LoginUserParams

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", r.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	// ------------- Optional query parameter "password" -------------

	err = runtime.BindQueryParameter("form", true, false, "password", r.URL.Query(), &params.Password)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "password", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginUser(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LogoutUser operation middleware
func (siw *ServerInterfaceWrapper) LogoutUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LogoutUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithOptions("simple", "username", chi.URLParam(r, "username"), &username, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserByName operation middleware
func (siw *ServerInterfaceWrapper) GetUserByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithOptions("simple", "username", chi.URLParam(r, "username"), &username, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserByName(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithOptions("simple", "username", chi.URLParam(r, "username"), &username, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/content", wrapper.PostContent)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/content/{name}", wrapper.DeleteContentName)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/content/{name}", wrapper.GetContentName)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/content/{name}", wrapper.PutContentName)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/login", wrapper.LoginUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/logout", wrapper.LogoutUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/user/{username}", wrapper.DeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/{username}", wrapper.GetUserByName)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/user/{username}", wrapper.UpdateUser)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
