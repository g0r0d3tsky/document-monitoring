// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Api_keyScopes           = "api_key.Scopes"
	Contentstore_authScopes = "contentstore_auth.Scopes"
)

// Defines values for ContentStatus.
const (
	Archived  ContentStatus = "archived"
	Available ContentStatus = "available"
	Pending   ContentStatus = "pending"
)

// Content defines model for Content.
type Content struct {
	// File Binary data of the file
	File openapi_types.File `json:"file"`
	Id   *int64             `json:"id,omitempty"`

	// Metadata Additional metadata for the file
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
	Name     string                  `json:"name"`

	// Status File status
	Status *ContentStatus `json:"status,omitempty"`
}

// ContentStatus File status
type ContentStatus string

// User defines model for User.
type User struct {
	Email     *string `json:"email,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	Id        *int64  `json:"id,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	Password  *string `json:"password,omitempty"`
	Phone     *string `json:"phone,omitempty"`

	// Role User Role
	Role     *string `json:"role,omitempty"`
	Username *string `json:"username,omitempty"`
}

// DeletecontentParams defines parameters for Deletecontent.
type DeletecontentParams struct {
	ApiKey *string `json:"api_key,omitempty"`
}

// UpdatecontentWithFormParams defines parameters for UpdatecontentWithForm.
type UpdatecontentWithFormParams struct {
	// Name Name of content that needs to be updated
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Status Status of content that needs to be updated
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// LoginUserParams defines parameters for LoginUser.
type LoginUserParams struct {
	// Username The user name for login
	Username *string `form:"username,omitempty" json:"username,omitempty"`

	// Password The password for login in clear text
	Password *string `form:"password,omitempty" json:"password,omitempty"`
}

// AddcontentJSONRequestBody defines body for Addcontent for application/json ContentType.
type AddcontentJSONRequestBody = Content

// AddcontentFormdataRequestBody defines body for Addcontent for application/x-www-form-urlencoded ContentType.
type AddcontentFormdataRequestBody = Content

// UpdatecontentJSONRequestBody defines body for Updatecontent for application/json ContentType.
type UpdatecontentJSONRequestBody = Content

// UpdatecontentFormdataRequestBody defines body for Updatecontent for application/x-www-form-urlencoded ContentType.
type UpdatecontentFormdataRequestBody = Content

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = User

// CreateUserFormdataRequestBody defines body for CreateUser for application/x-www-form-urlencoded ContentType.
type CreateUserFormdataRequestBody = User

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = User

// UpdateUserFormdataRequestBody defines body for UpdateUser for application/x-www-form-urlencoded ContentType.
type UpdateUserFormdataRequestBody = User

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add a new content to the store
	// (POST /content)
	Addcontent(w http.ResponseWriter, r *http.Request)
	// Update an existing content
	// (PUT /content)
	Updatecontent(w http.ResponseWriter, r *http.Request)
	// Deletes a content
	// (DELETE /content/{contentId})
	Deletecontent(w http.ResponseWriter, r *http.Request, contentId int64, params DeletecontentParams)
	// Find content by ID
	// (GET /content/{contentId})
	GetcontentById(w http.ResponseWriter, r *http.Request, contentId int64)
	// Updates a content in the store with form data
	// (POST /content/{contentId})
	UpdatecontentWithForm(w http.ResponseWriter, r *http.Request, contentId int64, params UpdatecontentWithFormParams)
	// Create user
	// (POST /user)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Logs user into the system
	// (GET /user/login)
	LoginUser(w http.ResponseWriter, r *http.Request, params LoginUserParams)
	// Logs out current logged in user session
	// (GET /user/logout)
	LogoutUser(w http.ResponseWriter, r *http.Request)
	// Delete user
	// (DELETE /user/{username})
	DeleteUser(w http.ResponseWriter, r *http.Request, username string)
	// Get user by user name
	// (GET /user/{username})
	GetUserByName(w http.ResponseWriter, r *http.Request, username string)
	// Update user
	// (PUT /user/{username})
	UpdateUser(w http.ResponseWriter, r *http.Request, username string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Add a new content to the store
// (POST /content)
func (_ Unimplemented) Addcontent(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an existing content
// (PUT /content)
func (_ Unimplemented) Updatecontent(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Deletes a content
// (DELETE /content/{contentId})
func (_ Unimplemented) Deletecontent(w http.ResponseWriter, r *http.Request, contentId int64, params DeletecontentParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find content by ID
// (GET /content/{contentId})
func (_ Unimplemented) GetcontentById(w http.ResponseWriter, r *http.Request, contentId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Updates a content in the store with form data
// (POST /content/{contentId})
func (_ Unimplemented) UpdatecontentWithForm(w http.ResponseWriter, r *http.Request, contentId int64, params UpdatecontentWithFormParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create user
// (POST /user)
func (_ Unimplemented) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Logs user into the system
// (GET /user/login)
func (_ Unimplemented) LoginUser(w http.ResponseWriter, r *http.Request, params LoginUserParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Logs out current logged in user session
// (GET /user/logout)
func (_ Unimplemented) LogoutUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete user
// (DELETE /user/{username})
func (_ Unimplemented) DeleteUser(w http.ResponseWriter, r *http.Request, username string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user by user name
// (GET /user/{username})
func (_ Unimplemented) GetUserByName(w http.ResponseWriter, r *http.Request, username string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update user
// (PUT /user/{username})
func (_ Unimplemented) UpdateUser(w http.ResponseWriter, r *http.Request, username string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Addcontent operation middleware
func (siw *ServerInterfaceWrapper) Addcontent(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Contentstore_authScopes, []string{"write:contents", "read:contents"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Addcontent(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Updatecontent operation middleware
func (siw *ServerInterfaceWrapper) Updatecontent(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Contentstore_authScopes, []string{"write:contents", "read:contents"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Updatecontent(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Deletecontent operation middleware
func (siw *ServerInterfaceWrapper) Deletecontent(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "contentId" -------------
	var contentId int64

	err = runtime.BindStyledParameterWithOptions("simple", "contentId", chi.URLParam(r, "contentId"), &contentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "contentId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Contentstore_authScopes, []string{"write:contents", "read:contents"})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeletecontentParams

	headers := r.Header

	// ------------- Optional header parameter "api_key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("api_key")]; found {
		var ApiKey string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "api_key", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "api_key", valueList[0], &ApiKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "api_key", Err: err})
			return
		}

		params.ApiKey = &ApiKey

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Deletecontent(w, r, contentId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetcontentById operation middleware
func (siw *ServerInterfaceWrapper) GetcontentById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "contentId" -------------
	var contentId int64

	err = runtime.BindStyledParameterWithOptions("simple", "contentId", chi.URLParam(r, "contentId"), &contentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "contentId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Api_keyScopes, []string{})

	ctx = context.WithValue(ctx, Contentstore_authScopes, []string{"write:contents", "read:contents"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetcontentById(w, r, contentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdatecontentWithForm operation middleware
func (siw *ServerInterfaceWrapper) UpdatecontentWithForm(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "contentId" -------------
	var contentId int64

	err = runtime.BindStyledParameterWithOptions("simple", "contentId", chi.URLParam(r, "contentId"), &contentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "contentId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Contentstore_authScopes, []string{"write:contents", "read:contents"})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdatecontentWithFormParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatecontentWithForm(w, r, contentId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LoginUserParams

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", r.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	// ------------- Optional query parameter "password" -------------

	err = runtime.BindQueryParameter("form", true, false, "password", r.URL.Query(), &params.Password)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "password", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginUser(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LogoutUser operation middleware
func (siw *ServerInterfaceWrapper) LogoutUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LogoutUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithOptions("simple", "username", chi.URLParam(r, "username"), &username, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserByName operation middleware
func (siw *ServerInterfaceWrapper) GetUserByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithOptions("simple", "username", chi.URLParam(r, "username"), &username, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserByName(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithOptions("simple", "username", chi.URLParam(r, "username"), &username, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/content", wrapper.Addcontent)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/content", wrapper.Updatecontent)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/content/{contentId}", wrapper.Deletecontent)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/content/{contentId}", wrapper.GetcontentById)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/content/{contentId}", wrapper.UpdatecontentWithForm)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/login", wrapper.LoginUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/logout", wrapper.LogoutUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/user/{username}", wrapper.DeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/{username}", wrapper.GetUserByName)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/user/{username}", wrapper.UpdateUser)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
