openapi: 3.0.3
info:
  title: Swagger contentstore - OpenAPI 3.0
  description: |-
    This is a sample content Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the content store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of contentstore, then click [here](https://editor.swagger.io/?url=https://contentstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load contentstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The content Store repository](https://github.com/swagger-api/swagger-contentstore)
    - [The source API definition for the content Store](https://github.com/swagger-api/swagger-contentstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://contentstore3.swagger.io/api/v3
tags:
  - name: content
    description: Everything about your contents
    externalDocs:
      description: Find out more
      url: http://swagger.io
paths:
  /content:
    put:
      tags:
        - content
      summary: Update an existing content
      description: Update an existing content by Id
      operationId: updatecontent
      requestBody:
        description: Update an existent content in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Content'
          application/xml:
            schema:
              $ref: '#/components/schemas/Content'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Content'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Content'
        '400':
          description: Invalid ID supplied
        '404':
          description: content not found
        '422':
          description: Validation exception
      security:
        - contentstore_auth:
            - write:contents
            - read:contents
    post:
      tags:
        - content
      summary: Add a new content to the store
      description: Add a new content to the store
      operationId: addcontent
      requestBody:
        description: Create a new content in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Content'
          application/xml:
            schema:
              $ref: '#/components/schemas/Content'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Content'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Content'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - contentstore_auth:
            - write:contents
            - read:contents
  /content/{contentId}:
    get:
      tags:
        - content
      summary: Find content by ID
      description: Returns a single content
      operationId: getcontentById
      parameters:
        - name: contentId
          in: path
          description: ID of content to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Content'
        '400':
          description: Invalid ID supplied
        '404':
          description: content not found
      security:
        - api_key: []
        - contentstore_auth:
            - write:contents
            - read:contents
    post:
      tags:
        - content
      summary: Updates a content in the store with form data
      description: ''
      operationId: updatecontentWithForm
      parameters:
        - name: contentId
          in: path
          description: ID of content that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of content that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of content that needs to be updated
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
      security:
        - contentstore_auth:
            - write:contents
            - read:contents
    delete:
      tags:
        - content
      summary: Deletes a content
      description: delete a content
      operationId: deletecontent
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: contentId
          in: path
          description: content id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid content value
      security:
        - contentstore_auth:
            - write:contents
            - read:contents
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
   
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        role:
          type: string
          description: User Role
          format: string
          example: "admin"
      xml:
        name: user
    
    Content:
      type: object
      required:
        - name
        - file
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: example_file
        file:
          type: string
          format: binary
          description: Binary data of the file
        metadata:
          type: object
          description: Additional metadata for the file
          example:
            author: John Doe
            created_at: 2024-09-10T08:00:00Z
        status:
          type: string
          description: File status
          enum:
            - available
            - pending
            - archived
      xml:
        name: fileContent
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    content:
      description: content object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Content'
        application/xml:
          schema:
            $ref: '#/components/schemas/Content'
  securitySchemes:
    contentstore_auth:
      type: apiKey
      name: Authorization
      in: header
      description: JWT Authorization header using the Bearer scheme
        
    api_key:
      type: apiKey
      name: api_key
      in: header