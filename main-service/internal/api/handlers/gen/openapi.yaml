openapi: 3.0.3
info:
  title: Swagger contentstore - OpenAPI 3.0
  description: |-
    The Document Monitoring Service is designed to provide continuous tracking and oversight of critical documents throughout their lifecycle. 
    This service enables users to monitor changes, updates, and the status of documents in real time, ensuring compliance, version control, and security. 
    Key features include automated alerts for document modifications, role-based access control, and comprehensive audit logs for transparency.
    Whether used for legal, financial, or operational documents, the service ensures that all document-related activities are tracked, helping organizations maintain control, meet regulatory requirements, and enhance collaboration.
    
    Some useful links:
    - [repository](https://github.com/g0r0d3tsky/document-monitoring)
  termsOfService: http://swagger.io/terms/
  contact:
    email: gorodetskiy39@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: /api/v1
paths:
  /content:
    post:
      tags:
        - content
      summary: Upload text or file content
      description: >
        Отправьте либо обычный текст (Content-Type: text/plain), либо файл любого расширения через multipart/form-data.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: "Файл для загрузки."
                  example: "<binary data>"
              required:
                - file
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Контент успешно загружен."
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Недопустимый тип содержимого."

  /content/{name}:
    parameters:
      - name: name
        in: path
        description: Уникальное имя контента
        required: true
        schema:
          type: string
    get:
      tags:
        - content
      summary: Get content by name
      description: >
        Получить содержимое по его уникальному имени. Если содержимое является текстом, оно будет возвращено из MongoDB.
        Если содержимое является файлом, будет инициирована загрузка файла с сервера или из MongoDB.
      responses:
        '200':
          description: Содержимое успешно найдено
          content:
            multipart/form-data:
              schema:
                type: object


        '404':
          description: Контент не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Контент с указанным именем не найден."
    delete:
      tags:
        - content
      summary: Delete content by name
      description: >
        Удалить содержимое по его уникальному имени. Если содержимое является текстом, оно будет удалено из MongoDB.
        Если содержимое является файлом, файл будет удален с сервера или из MongoDB, а запись удалена из PostgreSQL.
      responses:
        '200':
          description: Контент успешно удален
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Контент успешно удален."
        '404':
          description: Контент не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Контент с указанным именем не найден."
    put:
      tags:
        - content
      summary: Update content by name
      description: >
        Обновить содержимое по его уникальному имени. Можно обновить текстовое содержимое или заменить файл.
        При обновлении текста, новое текстовое содержимое будет сохранено в MongoDB.
        При обновлении файла, старый файл будет удален, а новый файл сохранен на сервере или в MongoDB.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: "Новый файл для загрузки."
                  example: "<binary data>"
              required:
                - file
      responses:
        '200':
          description: Контент успешно обновлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Контент успешно обновлен."
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Некорректные данные для обновления."
        '404':
          description: Контент не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Контент с указанным именем не найден."
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        role:
          type: string
          description: User Role
          format: string
          example: "admin"
      xml:
        name: user

    Content:
      type: object
      required:
        - name
        - file
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: example_file
        file:
          type: string
          format: binary
          description: Binary data of the file
        metadata:
          type: object
          description: Additional metadata for the file
          example:
            author: John Doe
            created_at: 2024-09-10T08:00:00Z
        status:
          type: string
          description: File status
          enum:
            - available
            - pending
            - archived
      xml:
        name: fileContent
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    content:
      description: content object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Content'
        application/xml:
          schema:
            $ref: '#/components/schemas/Content'
  securitySchemes:
    contentstore_auth:
      type: apiKey
      name: Authorization
      in: header
      description: JWT Authorization header using the Bearer scheme

